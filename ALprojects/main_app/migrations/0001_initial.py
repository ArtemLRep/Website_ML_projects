# Generated by Django 4.2.4 on 2023-10-19 12:22

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('work_place', models.CharField(blank=True, max_length=200, null=True, verbose_name='work_place')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='birth_date')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FeedbackTopicModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic_cat', models.CharField(max_length=300, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='HomeOwnershipCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('home_category', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectNames',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='PurposeCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purpose_category', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ResultCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_cat', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SwanClfResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.TextField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='SwanClfData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True)),
                ('image', models.ImageField(upload_to='swan_classification/photos/')),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.swanclfresult')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HistoryModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(auto_now_add=True, verbose_name='date_time')),
                ('result', models.CharField(max_length=100, verbose_name='result')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.projectnames')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FeedbackModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(max_length=1000, verbose_name='text')),
                ('answer', models.TextField(blank=True, max_length=1000, verbose_name='answer')),
                ('date_time_created', models.DateTimeField(auto_now_add=True, verbose_name='date_time_created')),
                ('date_time_last_change', models.DateTimeField(auto_now=True, verbose_name='date_time_last_change')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.projectnames')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.feedbacktopicmodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BankLoanData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(auto_now_add=True, verbose_name='date_time')),
                ('amount', models.FloatField(help_text='Input float value', null=True, verbose_name='amount')),
                ('credit_score', models.IntegerField(help_text='Input integer value', null=True, verbose_name='credit score')),
                ('term', models.PositiveIntegerField(help_text='Input integer value', null=True, verbose_name='Loan term in months')),
                ('income', models.FloatField(help_text='Input float value', null=True, verbose_name='income')),
                ('years_in_current_job', models.IntegerField(help_text='Input integer value', null=True, verbose_name='years on current job')),
                ('monthly_debt', models.FloatField(help_text='Input float value', null=True, verbose_name='monthly debt')),
                ('years_of_credit_history', models.FloatField(help_text='Input float value', null=True, verbose_name='years of credit history')),
                ('number_of_open_accounts', models.IntegerField(help_text='Input integer value', null=True, verbose_name='number of open accounts')),
                ('number_of_credit_problems', models.IntegerField(help_text='Input integer value', null=True, verbose_name='number of credit problems')),
                ('current_credit_balance', models.FloatField(help_text='Input float value', null=True, verbose_name='current credit balance')),
                ('maximum_open_credit', models.FloatField(help_text='Input float value', null=True, verbose_name='maximum open credit')),
                ('bankruptcies', models.IntegerField(help_text='Input float value', null=True, verbose_name='bankruptcies')),
                ('tax_liens', models.IntegerField(help_text='Input float value', null=True, verbose_name='tax liens')),
                ('home_ownership', models.ForeignKey(help_text='Chose category', on_delete=django.db.models.deletion.CASCADE, to='main_app.homeownershipcategory')),
                ('purpose', models.ForeignKey(help_text='Chose category', on_delete=django.db.models.deletion.CASCADE, to='main_app.purposecategory')),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.resultcategory')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
